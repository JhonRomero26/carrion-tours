---
import { Icon } from 'astro-icon/components'
import Pill from '@/components/Pill.astro'
import type { HTMLAttributes } from 'astro/types'

type Props = {
  image: string
  title: string
  location: string
  visitDate: string
  description: string
  categories?: string[]
  mapsUrl: string
  reservationUrl: string
} & HTMLAttributes<'section'>

const {
  id,
  title,
  image,
  location,
  visitDate,
  description,
  categories,
  reservationUrl,
  mapsUrl,
} = Astro.props
---

<section
  id={id}
  data-id="hero-presentation"
  class="w-full overflow-hidden relative h-full"
  style={{
    '--hero-background': '',
  }}
>
  <div class="h-full px-12 pt-16">
    <div
      class="flex flex-col gap-8 h-full md:flex-row md:justify-between items-center"
    >
      <div
        id="hero-info"
        data-scroll="hidden"
        class="overflow-y-auto py-8 max-w-md max-md:text-center"
      >
        <h2 id="title" class="font-bold mb-4 text-3xl">
          {title}
        </h2>
        <div class="flex my-6 max-md:justify-center flex-wrap gap-2">
          {
            categories &&
              categories.map((category) => (
                <Pill class="bg-blue-100 text-blue-600">{category}</Pill>
              ))
          }
        </div>
        <div class="w-full mt-2 flex flex-col gap-2 font-medium text-center">
          <div class="flex items-center gap-2">
            <Icon name="tabler:map-pin" />
            <span id="location">{location}</span>
          </div>
          <div class="flex items-center gap-2">
            <Icon name="tabler:calendar" />
            <span id="calendar">{visitDate}</span>
          </div>
        </div>
        <div class="max-md:overflow-hidden">
          <p id="hero-description" data-scroll="hidden" class="mt-4 h-full">
            {description}
          </p>
        </div>
        <div class="flex mt-6 max-md:justify-center gap-2">
          <a
            id="reservation-url"
            class="px-4 py-2 rounded flex gap-2 items-center hover:bg-blue-800 bg-blue-900 text-white transition-colors"
            rel="noreferrer"
            target="_blank"
            href={reservationUrl}
          >
            <Icon name="tabler:calendar-plus" />
            <span>Reserva tu visita</span>
          </a>
          <a
            id="maps-url"
            class="px-4 py-2 rounded flex gap-2 items-center hover:bg-white text-blue-900 bg-white/85 transition-colors"
            rel="noreferrer"
            target="_blank"
            href={mapsUrl}
          >
            <Icon name="tabler:map" />
            <span>Mirar en el mapa</span>
          </a>
        </div>
        <div class="mt-8 flex justify-center">
          <button
            id="show-more"
            class="flex gap-2 items-center bg-white
             text-blue-900 px-4 py-2 rounded md:hidden"
          >
            <Icon name="tabler:chevron-down" />
            <span>Mostrar m√°s</span>
          </button>
        </div>
      </div>

      <div
        id="slides-container"
        class="md:max-w-sm max-md:absolute flex flex-col gap-4 overflow-hidden items-center max-md:backdrop-blur-xl max-md:w-full h-full"
      >
        <div class="max-md:max-w-sm w-full h-full">
          <header class="w-full pb-2">
            <div class="flex gap-2">
              <div
                class="flex px-4 w-full py-2 gap-2 bg-white/80 rounded items-center"
              >
                <Icon name="tabler:search" class="text-slate-800 text-xl" />
                <input
                  id="hero-search"
                  class="bg-transparent w-full outline-0 text-slate-800 placeholder:text-slate-700"
                  placeholder="Buscar..."
                />
              </div>
              <button
                id="close-slides"
                class="px-4 md:hidden text-white bg-white/25 hover:bg-white/50 rounded"
              >
                <Icon name="tabler:x" />
              </button>
            </div>
          </header>
          <div
            id="slides"
            data-scroll="hidden"
            class="flex w-full overflow-y-auto py-4 flex-col gap-4 h-full"
          >
            <slot />
          </div>
        </div>
      </div>
    </div>
  </div>

  <picture class="absolute -z-10 top-0 left-0 block w-full h-full">
    <img
      id="hero-image"
      class="h-full animate-duration-500 animate-ease-in animate-fade animate-once w-full object-cover object-center"
      src={image}
    />
    <span
      class="absolute top-0 left-0 w-full h-full bg-gradient-to-b md:bg-gradient-to-r"
      style={{
        '--tw-gradient-stops': 'var(--hero-background) 25%, transparent 100%',
      }}></span>
  </picture>
</section>

<script>
  import {
    averageImageColor,
    contrastColor,
    rgb2hex,
  } from '@/utils/calculate_colors'

  const $hero = document.querySelector(
    '[data-id="hero-presentation"]'
  ) as HTMLElement
  const $slides = $hero.querySelectorAll(
    '[data-id=slide]'
  ) as NodeListOf<HTMLElement>
  const $image = $hero.querySelector('#hero-image') as HTMLImageElement
  const $info = $hero.querySelector('#hero-info') as HTMLElement
  const $search = $hero.querySelector('#hero-search') as HTMLInputElement
  const $showMore = $hero.querySelector('#show-more') as HTMLButtonElement
  const $slidesContainer = $hero.querySelector(
    '#slides-container'
  ) as HTMLElement
  const $slidesWrapper = $hero.querySelector('#slides') as HTMLElement
  const $closeSlides = $hero.querySelector('#close-slides') as HTMLElement

  $showMore.addEventListener('click', () => {
    $slidesContainer.classList.remove('max-md:hidden')
  })

  $slidesWrapper.addEventListener('click', (e) => {
    $slidesContainer.classList.add('max-md:hidden')
  })

  $closeSlides.addEventListener('click', (e) => {
    $slidesContainer.classList.add('max-md:hidden')
  })

  const $headerBtn = document.querySelector('#menu-button')
  const $headerMenu = document.querySelector('#header-menu')

  const changeColors = ({ image }: { image: HTMLImageElement }) => {
    const rgb = averageImageColor(image)
    const contrastWhite = contrastColor({
      rgb1: rgb,
      rgb2: { r: 255, g: 255, b: 255 },
    })
    const contrastDark = contrastColor({
      rgb1: rgb,
      rgb2: { r: 30, g: 41, b: 59 },
    })

    const colorContrasted =
      Math.max(contrastWhite, contrastDark) === contrastWhite
        ? 'text-slate-100'
        : 'text-slate-900'

    $hero.classList.remove('text-slate-100', 'text-slate-900')
    $hero.classList.add(colorContrasted)
    $hero.style.setProperty('--hero-background', rgb2hex(rgb, 95))

    $headerBtn!.classList.remove('text-slate-100', 'text-slate-900')
    $headerBtn!.classList.add(colorContrasted)
    $headerMenu!.classList.remove('md:text-slate-100', 'md:text-slate-900')
    $headerMenu!.classList.add(`md:${colorContrasted}`)
  }

  changeColors({ image: $image })
  if ($slides) {
    $slides.forEach((slide) => {
      const image = slide.querySelector('img') as HTMLImageElement

      slide.addEventListener('click', (e) => {
        if ($image.src !== image.src) {
          changeColors({ image })
          const title = slide.querySelector('#title')!.textContent
          const location = slide.querySelector('#location')!.textContent
          const calendar = slide.querySelector('#calendar')!.textContent
          const description = slide.getAttribute('data-description')
          const reservationUrl = slide.getAttribute('data-reservation-url')
          const mapsUrl = slide.getAttribute('data-maps-url')

          $image.src = image.src
          $info.querySelector('#title')!.textContent = title
          $info.querySelector('#location')!.textContent = location
          $info.querySelector('#calendar')!.textContent = calendar
          $info.querySelector('#hero-description')!.textContent = description

          $info
            .querySelector('#reservation-url')!
            .setAttribute('href', reservationUrl!)
          $info.querySelector('#maps-url')!.setAttribute('href', mapsUrl!)
        }
      })
    })

    $search.addEventListener('input', () => {
      $slides.forEach((slide) => {
        const title = slide.querySelector('#title')!
        const location = slide.querySelector('#location')!
        const categoryContainer = slide.querySelector('#categories')!
        const categories = Array.of(...categoryContainer.children)
          .map((el) => el.textContent)
          .join(' ')

        const { value } = $search

        if (
          !(
            categories.includes(value) ||
            title.textContent!.toLowerCase().includes(value.toLowerCase()) ||
            location.textContent!.toLowerCase().includes(value.toLowerCase())
          )
        ) {
          slide.classList.add('hidden')
        } else {
          slide.classList.remove('hidden')
        }
      })
    })
  }
</script>
